'''Contain template details for creating a python library'''
lib_header  = '''"""
Generated by SGWrapperGen - DO NOT EDIT!

SwinGame wrapper for Python using ctypes module

Links to platform SGSDK library (SGSDK.dll, libSGSDK.so, or libSGSDK.dylib)

"""
'''
    
#TODO: Add module level description to module header __doc__ block
header = '''"""SwinGame wrapper for Python - %(name)s
Wrapping %(pascal_name)s.pas
"""
# Generated by SGWrapperGen - DO NOT EDIT!

'''

header2 = """
from ctypes import cdll, Structure, c_void_p, c_bool, POINTER, c_byte, c_int, c_uint32, c_float, c_char_p, c_uint16, CFUNCTYPE, create_string_buffer, byref
from ._common import SGSDK, extern
"""

method = """
%(uname_lower)s = extern(
    SGSDK.%(calls.name)s,
    [%(argtypes)s],
    doc='''%(doc)s
    params: %(params)s
    ''',
    ret_type=%(return_type)s,
    result_buffers=%(resultbufs)d)
"""

function = """
%(uname_lower)s = extern(
    SGSDK.%(calls.name)s,
    [%(argtypes)s],
    doc='''%(doc)s
    params: %(params)s
    returns: %(return_type)s
    ''',
    ret_type=%(return_type)s,
    result_buffers=%(resultbufs)d)
"""

alias = """
def %(uname_lower)s(%(args)s):
    '''%(doc)s
    params: %(params)s
    '''
    return %(is_alias)s(%(calls.args)s)
"""

special_cases = {
'calculate_framerate': """
def %(uname_lower)s():
    '''%(doc)s
    params: %(params)s
    '''
    bufs = [create_string_buffer(10) for i in range(3)]
    color = c_int()
    SGSDK.%(calls.name)s(bufs[0], bufs[1], bufs[2], byref(color))
    return tuple([b.value for b in bufs] + [color])
""",
'widest_points': """
SGSDK.%(calls.name)s.restype = c_bool
def %(uname_lower)s(c, from):
    '''%(doc)s
    params: %(params)s
    '''
    pt1, pt2 = Point2D(), Point2D()
    if SGSDK.%(calls.name)s(c, from, byref(pt1), byref(pt2)):
        return pt1, pt2
    else:
        return None, None
""",
'distant_point_on_circle_heading': """
SGSDK.%(calls.name)s.restype = c_bool
def %(uname_lower)s(pt, circle, heading):
    '''%(doc)s
    params: %(params)s
    '''
    result = Point2D()
    if SGSDK.%(calls.name)s(pt, circle, heading, byref(result)):
        return result
    else:
        return None
""",
'line_intersection_point': """
SGSDK.%(calls.name)s.restype = c_bool
def %(uname_lower)s(l1, l2):
    '''%(doc)s
    params: %(params)s
    '''
    result = Point2D()
    if SGSDK.%(calls.name)s(l1, l2, byref(result)):
        return result
    else:
        return None
""",
'ray_intersection_point': """
SGSDK.%(calls.name)s.restype = c_bool
def %(uname_lower)s(pt, heading, line):
    '''%(doc)s
    params: %(params)s
    '''
    result = Point2D()
    if SGSDK.%(calls.name)s(pt, heading, line, byref(result)):
        return result
    else:
        return None
""",
'exception_message': '',
'exception_occured': '',
}
special_cases['tangent_points'] = special_cases['widest_points']
